= DCA0201: Atividades PDI =

Bárbara Gabriella <barbaragabriellass@outlook.com>
Vinícius Danyllo <vinicius.danyllo@outlook.com>

Link github (link:http://barbaragabriella.github.io)

== Ementa ==

=== Manipulando pixels em uma imagem

==== Regiões

A atividade consiste em implementar um programa que exiba o negativo de uma parte da imagem partindo de dois pontos, P1 e P2, fornecidos pelo usuário. O programa inicia solicitando as coordenadas ao usário e só da sequência quando coordenadas válidas são informadas. Feito isso, para dar o efeito de negativo só é preciso inverter a escala de cada pixel da região especificada. No caso de imagem colorida, é preciso inverter cada componente RGB. 

O código é como segue.

[[exa_regions, regions]]
[source,cpp]
----
include::exemplos/regions.cpp[]
----

Foi utilizada a seguinte imagem e o resultado é como segue.

[[fig_imagem, imagem]]
[.text-center]
image::figs/imagem.jpg[Imagem original, title="imagem original"]


[[fig_regions, regions]]
[.text-center]
image::figs/regions.png[Imagem alterada, title="imagem alterada"]

==== Troca Regiões

A ideia nessa parte da atividade era trocar os quadrantes em diagonal na imagem. primeiro criou-se uma imagem do mesmo tamanho que a original, e depois o algoritmo cuidou de preencher cada pixel da nova imagem. O programa é o seguinte.


[[exa_trocaregioes, trocaregioes]]
[source,cpp]
----
include::exemplos/trocaregioes.cpp[]
----

O resultado pode ser visto na figura <<fig_trocaregioes>>

[[fig_trocaregioes, trocaregioes]]
[.text-center]
image::figs/trocaregioes.png[Imagem invertida, title="imagem invertida"]

=== Preenchendo Regiões

==== Bolhas

No código oringinal, cada objeto tem um valor que varia entre 0 e 255, e que quando há mais 255 objetos a otulação fica comprometida. Para resolver esse problema, basta resetar o valor de nobjects utilizando a função módulo.

[source,cpp]
----
floodFill(image, p, nobjects % 255);
----

O objetivo desta atividade era implementar no código labeling.cpp de forma que ele contasse o número de bolhas que possui e não possui furos, desconsiderando as bolhas que tocam as bordas da imagem, baseado na imagem original mostrada abaixo <<fig_bolhas>>.

[[fig_bolhas, bolhas]]
[.text-center]
image::figs/bolhas.png[Imagem original, title="imagem original"]

Para realizar a contagem, primeiro temos que eliminar todas as bolhas que tocam as bordas, uma solução foi aplicar a cor branca (cor das bolhas) nos pixels da borda e então usamos o floodfill para pintar no mesmo tom do fundo da imagem (preto). Uma vez feito isso, eliminamos todas as bolhas que tocavam as bordas. Agora, precisamos diferenciar o fundo da imagem dos furos das bolhas. Para isso, aplicamos outro floodfill com um tom diferente do preto (esse tom foi chamado de fundo no programa).

Agora que temos os fundos das bolhas diferenciadas, podemos contar as bolhas como sendo com furo e sem furo. Inicialmente contamos quantas bolhas tem, independente do furo. Seguindo o código labeling.cpp, o número de bolhas é armazenado em nobjects.

Uma vez que temos o número bolhas, procuramos as bolhas que tem furos. Para isso, percorremos toda a matriz e armazemos as coordenadas x e y na variável p (como no código original). O laço continua até achar o furo que tem o tom de cinza, o que significa que a bolha tem furo. 

O código completo é apresentado abaixo.

[[exa_labeling, labeling]]
[source,cpp]
----
include::exemplos/labeling.cpp[]
----

O resultado do programa pode ser analisado nas figuras abaixo.

[[fig_final, final]]
[.text-center]
image::figs/final.png[Resultado do algoritmo, title="Resultado"]

[[fig_numero, numero]]
image::figs/numero.png[Número de bolhas, title="Número de bolhas"]

=== Manipulação de histogramas

==== Equalização

O objetivo deste algoritmo é realizar a equalização do histograma para cada imagem capturada, antes da sua exibição. A equalização consiste em melhorar o contraste da imagem "esticando" sua intensidade. Abaixo encontra-se o código do programa <<exa_equalized.cpp>>

[[exa_equalized, equalized]]
[source,cpp]
----
include::exemplos/equalized.cpp[]
----

O programa inicial, histograma, já calculava o histograma de cada imagem RGB. Nesse caso, cada imagem capturada era transformada para a escala de cinza, calculado o histograma e então o método de equalizar era aplicado. Após a equalização, aplicava-se novamente o histograma par anotar a diferença. Ao final, as duas imagens eram exibidas. Para fins de melhorar análise, foi utilizada imagem para uma melhor percepção do método. A imagem original, colorida, é representada abaixo. As demais imagens, em escala de cinza e equalizada, são <<fig_nequalizado>> e <<fig_equalizado>>.

[[fig_image2, image2]]
[.text-center]
image::figs/image2.jpg[Imagem original, title="Imagem original"]

[[fig_nequalizado, nequalizado]]
[.text-center]
image::figs/nequalizado.png[Imagem em escala de cinza, title="Imagem em escala de cinza"]

[[fig_equalizado, equalizado]]
[.text-center]
image::figs/equalizado.png[Imagem equalizada, title="Imagem equalizada"]

Para uma melhor análise, segue os histogramas em grande escala. No primeiro histograma vemos que os pixels parecem agrupados em torno do meio da faixa de intensidade disponível. Com a equalização, esse intervalo é esticado. Logo vemos que histograma da imagem equalizada apresenta uma maior uniformidade entre os tons de cinza presentes.

[[fig_histogramaNeq, histogramaNeq]]
[.text-center]
image::figs/histogramaNeq.png[Histograma da imagem em escala de cinza, title="Histograma da imagem em escala de cinza"]

[[fig_histogramaEq, histogramaEq]]
[.text-center]
image::figs/histogramaEq.png[Histograma da imagem equalizada, title="Histograma da imagem equalizada"]

//A saida do programa _hello_ é mostrado na figura <<fig_hello>>
//[[fig_hello, Hello]]
//[.text-center]
//.Saida do programa hello
//image::figs/hello.png[Saida do programa hello, title="Saida do programa hello"]

//Aqui vem a listagem do programa link:exemplos/hello.cpp[] , mostrada na Listagem 
//<<exa_hello>>, cuja unica funcionalidade é apresentar na tela uma imagem fornecida via 
//linha de comando.

//[[exa_hello, Hello]]
//[source.cpp]
//----
//link:exemplos/labeling.cpp[]
//include::exemplos/labeling.cpp[]
//----

==== Detecção de Movimento

Agora, vamos utilizar o histograma da imagem capturada pela camera em tempo real para detectar sem há ou não movimento. Este algoritimo pode ser implementado utilizando o histograma de uma ou mais cores, para sem mais completo, utilizaremos de as três cores.

[[motiondetector, motiondetector]]
[source,cpp]
----
include::exemplos/motiondetector.cpp[]
----

O algoritmo trabalha recebendo o histograma atual (como já foi visto no exemplo anterior) e o compara com o histograma antigo através da chamda da função compareHist(), como é visto no trecho de código a seguir.

[source,cpp]
----
// recebe a diferença entre  os histogramas
histDifR = compareHist(histR, histLastR, CV_COMP_INTERSECT);
histDifG = compareHist(histG, histLastG, CV_COMP_INTERSECT);
histDifB = compareHist(histB, histLastB, CV_COMP_INTERSECT);
----

Esta função retorna um double que é comparado com o seu valor anterior e verifica se esta comparação (ou diferença) está dentro de um limiar pré estabelecido. Se sim, é exibida uma mensagem na tela de vídeo de que não há movimento, se não, é uma mensagem de que há movimento na cena.

[source, cpp]
----
// Compara a diferença atual com a antiga incrementada de um limiar
if(histDifR > histDifRLast + limite || histDifR < histDifRLast - limite ||
    histDifG > histDifGLast + limite || histDifG < histDifGLast - limite ||
    histDifB > histDifBLast + limite || histDifB < histDifBLast - limite) {
  putText(image, "Ha movimento", cvPoint(100,30), FONT_HERSHEY_COMPLEX_SMALL, 0.8, cvScalar(200,200,250), 1, CV_AA);
} else {
    putText(image, "Sem movimento", cvPoint(100,30), FONT_HERSHEY_COMPLEX_SMALL, 0.8, cvScalar(200,200,250), 1, CV_AA);
}
----

As imagens a seguir ilustram os dois tipos de saída que o programa retorna. A primeira é quando <<sem_movimento>>, e a segunda é quando <<com_movimento>>.

[[sem_movimento, não há movimento]]
[.text-center]
image::figs/sem_movimento.png[Imagem sem movimento, title = "Imagem sem movimento"]

[[com_movimento, há movimento]]
[.text-center]
image::figs/com_movimento.png[Imagem com movimento, title = "Imagem com movimento"]

=== Filtragem no Domínio Espacial

==== Efeito TiltShift - Imagem

O tiltshift é um bonito efeito para se aplicar em suas fotos, dando a impressão de desfoco nas regiões superiores e inferiores através da aplicação de um borramento com a máscara "media" 5 x 5  demonstrada a seguir.

[source, cpp]
----
float media[] = {1, 1, 1, 1, 1,
                 1, 1, 1, 1, 1,
                 1, 1, 1, 1, 1,
                 1, 1, 1, 1, 1,
                 1, 1, 1, 1, 1};
----

O código a seguir aplica o tiltshift a uma imagem passada como parametro. O usuário também pode ajustar o efeito através dos sliders presentes na interface. Quando o programa é encerrado, uma imagem é salva com o efeito programado.

[[tiltshift, tiltshift]]
[source,cpp]
----
include::exemplos/tiltshift.cpp[]
----

==== Efeito TiltShift - Video

Uma aplicação bem interessante do efeito tiltshift é aplicá-lo em vídeos de timelapse, dando assim um efeito de "miniaturização" da cena. O código a seguir (<<tiltshiftvideo>>) aplica o tiltshift a um video passado como parametro.

[[tiltshiftvideo, tiltshiftvideo]]
[source,cpp]
----
include::exemplos/tiltshiftvideo.cpp[]
----

Temos a classe VideoWriter que é utilizada para escrever um quadro em um arquivo de vídeo, como é visto ao longo do código. Primeiramente, tem-se que abrir o arquivo de saída (não necessariamente ele precise existir, pois o opencv cria para você) especificando o caminho, o codec de vídeo, a taxa de quadros ou framerate (no nosso caso ele foi dividido pela metade para dar o efeito de miniaturização desejado), o tamanho de cada quadro e se o vídeo tem cor ou não (se é RGB ou em preto e branco).

[source,cpp]
----
videoWriter.open("video.avi", CV_FOURCC('D', 'I', 'V', '3'), cap.get(CV_CAP_PROP_FPS) / stepReductionRate, s, true);
----

Após isso, aplica-se o efeito tiltshift a cada frame do vídeo que for realmente para o vídeo final (descartando um sim e outro não) até o final do vídeo, quando não houver mais quadro, ele fecha o laço de repetição e encerra o programa.